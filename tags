!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ANGLE_STEP	include/key.h	/^# define ANGLE_STEP	/;"	d
ANGLE_STEP_ORTO	include/key.h	/^# define ANGLE_STEP_ORTO	/;"	d
ARROW_DOWN	include/key.h	/^# define ARROW_DOWN	/;"	d
ARROW_LEFT	include/key.h	/^# define ARROW_LEFT	/;"	d
ARROW_RIGHT	include/key.h	/^# define ARROW_RIGHT	/;"	d
ARROW_UP	include/key.h	/^# define ARROW_UP	/;"	d
BACKGROUND	include/fdf.h	/^# define			BACKGROUND	/;"	d
BUFF_SIZE	libft/get_next_line.h	/^# define BUFF_SIZE /;"	d
CC	Makefile	/^CC := clang$/;"	m
CC	libft/Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS := -Wall -Wextra -Werror -std=c99 -march=native -O2 -ftree-vectorize -fPIC -MMD -I. -I.\/$(INCLUDE) -I.\/$(LIBFT_INCLUDE) -I.\/$(MLX_DIR)$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
DEP	Makefile	/^DEP := $(OBJ:%.o=%.d)$/;"	m
ENOINDEX	libft/vec.h	/^# define ENOINDEX /;"	d
ERRORS_H	include/errors.h	/^# define ERRORS_H$/;"	d
ESC	include/key.h	/^# define ESC	/;"	d
FDF_H	include/fdf.h	/^# define FDF_H$/;"	d
FILE_OPEN	include/errors.h	/^# define FILE_OPEN	/;"	d
FILE_READ	include/errors.h	/^# define FILE_READ	/;"	d
FONT_HEIGHT	minilibx_macos/mlx_int.h	/^#define	FONT_HEIGHT	/;"	d
FONT_WIDTH	minilibx_macos/mlx_int.h	/^#define FONT_WIDTH	/;"	d
GET_NEXT_LINE_H	libft/get_next_line.h	/^# define GET_NEXT_LINE_H$/;"	d
I	include/key.h	/^# define I	/;"	d
INCLUDE	Makefile	/^INCLUDE := include$/;"	m
INTERNAL_H	libft/internal.h	/^# define INTERNAL_H$/;"	d
ISO	include/fdf.h	/^					ISO,$/;"	e	enum:__anon2
KEYBOARD_MAX	include/key.h	/^# define KEYBOARD_MAX /;"	d
KEY_0	include/key.h	/^# define KEY_0	/;"	d
KEY_1	include/key.h	/^# define KEY_1	/;"	d
KEY_2	include/key.h	/^# define KEY_2	/;"	d
KEY_3	include/key.h	/^# define KEY_3	/;"	d
KEY_4	include/key.h	/^# define KEY_4	/;"	d
KEY_5	include/key.h	/^# define KEY_5	/;"	d
KEY_6	include/key.h	/^# define KEY_6	/;"	d
KEY_7	include/key.h	/^# define KEY_7	/;"	d
KEY_8	include/key.h	/^# define KEY_8	/;"	d
KEY_9	include/key.h	/^# define KEY_9	/;"	d
KEY_H	include/key.h	/^# define KEY_H$/;"	d
LDFLAGS	Makefile	/^LDFLAGS := -fuse-linker-plugin -Wl,--strip-all,--sort-common,--as-needed,-z,relro$/;"	m
LIBFT_DIR	Makefile	/^LIBFT_DIR := libft$/;"	m
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
LIBFT_INCLUDE	Makefile	/^LIBFT_INCLUDE := $(LIBFT_DIR)$/;"	m
LIBFT_LIB	Makefile	/^LIBFT_LIB := $(LIBFT_DIR)\/libft.a$/;"	m
MAP_ERR	include/errors.h	/^# define MAP_ERR	/;"	d
MAX_EVENT	minilibx_macos/mlx_int.h	/^#define	MAX_EVENT	/;"	d
MAX_PIXEL_NB	minilibx_macos/mlx_int.h	/^#define MAX_PIXEL_NB	/;"	d
MAX_ZOOM	include/key.h	/^# define MAX_ZOOM	/;"	d
MEMORY	include/errors.h	/^# define MEMORY	/;"	d
MINUS	include/key.h	/^# define MINUS	/;"	d
MIN_ZOOM	include/key.h	/^# define MIN_ZOOM	/;"	d
MLX_DIR	Makefile	/^MLX_DIR := minilibx_macos$/;"	m
MLX_FLAGS	Makefile	/^MLX_FLAGS := -L $(MLX_DIR) -lmlx -framework OpenGL -framework AppKit$/;"	m
MLX_H	minilibx_macos/mlx.h	/^#define	MLX_H$/;"	d
MOUSE_LEFT_BUTTON	include/key.h	/^# define MOUSE_LEFT_BUTTON	/;"	d
MOUSE_RIGHT_BUTTON	include/key.h	/^# define MOUSE_RIGHT_BUTTON	/;"	d
MOUSE_SCROLL_DOWN	include/key.h	/^# define MOUSE_SCROLL_DOWN	/;"	d
MOUSE_SCROLL_LEFT	include/key.h	/^# define MOUSE_SCROLL_LEFT	/;"	d
MOUSE_SCROLL_RIGHT	include/key.h	/^# define MOUSE_SCROLL_RIGHT	/;"	d
MOUSE_SCROLL_UP	include/key.h	/^# define MOUSE_SCROLL_UP	/;"	d
MOUSE_THIRD_BUTTON	include/key.h	/^# define MOUSE_THIRD_BUTTON	/;"	d
NAME	Makefile	/^NAME := fdf$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
NOM	minilibx_macos/Makefile	/^NOM=libmlx.a$/;"	m
OBJ	Makefile	/^OBJ := $(SRC:%.c=$(OBJ_DIR)\/%.o)$/;"	m
OBJ	libft/Makefile	/^OBJ = $(addprefix $(OBJ_DIR)\/,$(SRC:.c=.o))$/;"	m
OBJ	minilibx_macos/Makefile	/^OBJ=$(OBJ1:.m=.o)$/;"	m
OBJ1	minilibx_macos/Makefile	/^OBJ1=$(SRC:.c=.o)$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR := obj$/;"	m
OBJ_DIR	libft/Makefile	/^OBJ_DIR = .\/obj$/;"	m
OFFSET_STEP	include/key.h	/^# define OFFSET_STEP	/;"	d
P	include/key.h	/^# define P	/;"	d
PARALLEL	include/fdf.h	/^					PARALLEL$/;"	e	enum:__anon2
PINK	include/fdf.h	/^# define			PINK	/;"	d
PLUS	include/key.h	/^# define PLUS	/;"	d
RETURN	minilibx_macos/mlx_xpm.c	/^#define	RETURN	/;"	d	file:
SRC	Makefile	/^SRC := main.c draw.c color.c keyboard.c errors.c read_map.c draw_map.c projection.c mouse.c keyboard_functions.c camera.c$/;"	m
SRC	libft/Makefile	/^SRC = ft_apply.c ft_atoi.c ft_bzero.c ft_calloc.c ft_foreach.c ft_isalnum.c ft_isalpha.c \\$/;"	m
SRC	minilibx_macos/Makefile	/^SRC= mlx_shaders.c mlx_new_window.m mlx_init_loop.m mlx_new_image.m mlx_xpm.c mlx_int_str_to_wordtab.c$/;"	m
SRC_DIR	libft/Makefile	/^SRC_DIR = .\/$/;"	m
TURQUOISE	include/fdf.h	/^# define			TURQUOISE	/;"	d
UNIQ_BPP	minilibx_macos/mlx_int.h	/^#define UNIQ_BPP	/;"	d
USAGE	include/errors.h	/^# define USAGE	/;"	d
VEC_H	libft/vec.h	/^# define VEC_H$/;"	d
WHITE	include/fdf.h	/^# define			WHITE	/;"	d
WIN_HEIGHT	include/fdf.h	/^# define			WIN_HEIGHT	/;"	d
WIN_WIDTH	include/fdf.h	/^# define			WIN_WIDTH	/;"	d
angle_x	include/fdf.h	/^	double			angle_x;$/;"	m	struct:__anon5
angle_y	include/fdf.h	/^	double			angle_y;$/;"	m	struct:__anon5
angle_z	include/fdf.h	/^	double			angle_z;$/;"	m	struct:__anon5
appid	minilibx_macos/mlx_int.h	/^  void			*appid;$/;"	m	struct:mlx_ptr_s
bpp	include/fdf.h	/^	int				bpp;$/;"	m	struct:__anon6
buffer	minilibx_macos/mlx_int.h	/^  char			*buffer;$/;"	m	struct:mlx_img_list_s
bytes_per_pixel	minilibx_macos/font.c	/^  unsigned int 	 bytes_per_pixel; \/* 2:RGB16, 3:RGB, 4:RGBA *\/ $/;"	m	struct:__anon8	file:
camera	include/fdf.h	/^	t_camera		*camera;$/;"	m	struct:__anon6
camera_init	src/camera.c	/^t_camera	*camera_init(t_map *map)$/;"	f
camera_reset	src/camera.c	/^void		camera_reset(t_camera *camera, t_map *map)$/;"	f
change_angle_x	src/keyboard_functions.c	/^void	change_angle_x(t_fdf *fdf, int keycode)$/;"	f
change_angle_y	src/keyboard_functions.c	/^void	change_angle_y(t_fdf *fdf, int keycode)$/;"	f
change_angle_z	src/keyboard_functions.c	/^void	change_angle_z(t_fdf *fdf, int keycode)$/;"	f
change_projection	src/keyboard_functions.c	/^void	change_projection(t_fdf *fdf, int keycode)$/;"	f
col	minilibx_macos/mlx_xpm.c	/^  int           col;$/;"	m	struct:s_xpm_col	file:
color	include/fdf.h	/^	int				color;$/;"	m	struct:__anon3
color	minilibx_macos/mlx_xpm.c	/^  int   color;$/;"	m	struct:s_col_name	file:
color_blend	src/color.c	/^static int	color_blend(int begin, int end, double percentage)$/;"	f	file:
color_from_percentage	src/color.c	/^static int	color_from_percentage(int start, int end, double percentage)$/;"	f	file:
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
content_size	libft/libft.h	/^	size_t			content_size;$/;"	m	struct:s_list
ctor	libft/vec.h	/^	void	(*ctor)(void *, const void *);$/;"	m	struct:__anon7
data	libft/vec.h	/^	void	*data;$/;"	m	struct:__anon7
display_log	minilibx_macos/mlx_shaders.c	/^void display_log(GLuint object, void (*param_func)(), void (*getlog_func)())$/;"	f
draw_along_x	src/draw.c	/^static void		draw_along_x(t_point start, t_point end, t_fdf *fdf,$/;"	f	file:
draw_along_y	src/draw.c	/^static void		draw_along_y(t_point start, t_point end, t_fdf *fdf,$/;"	f	file:
draw_line	src/draw.c	/^void			draw_line(t_point start, t_point end, t_fdf *fdf)$/;"	f
draw_map	src/draw_map.c	/^void			draw_map(t_fdf *fdf)$/;"	f
dtor	libft/vec.h	/^	void	(*dtor)(void *);$/;"	m	struct:__anon7
endian	include/fdf.h	/^	int				endian;$/;"	m	struct:__anon6
events_control	src/keyboard.c	/^void	events_control(t_fdf *fdf)$/;"	f
exit_err	src/errors.c	/^void	exit_err(char *err_msg)$/;"	f
fdf_init	src/main.c	/^void		fdf_init(t_map *map, t_fdf *fdf)$/;"	f
find_color	src/color.c	/^int			find_color(t_point *current, t_point *begin, t_point *end)$/;"	f
find_list	libft/get_next_line.c	/^t_list	*find_list(t_list **head, int fd)$/;"	f
find_vertex_color	src/color.c	/^int			find_vertex_color(int max, int min, int current)$/;"	f
flatten	src/keyboard_functions.c	/^void	flatten(t_fdf *fdf, int keycode)$/;"	f
font	minilibx_macos/mlx_int.h	/^  mlx_img_list_t	*font;$/;"	m	struct:mlx_ptr_s
font_atlas	minilibx_macos/font.c	/^} font_atlas = {$/;"	v	typeref:struct:__anon8	file:
font_fshader	minilibx_macos/mlx_int.h	/^  GLuint	font_fshader;$/;"	m	struct:glsl_info_s
font_program	minilibx_macos/mlx_int.h	/^  GLuint	font_program;$/;"	m	struct:glsl_info_s
font_vshader	minilibx_macos/mlx_int.h	/^  GLuint	font_vshader;$/;"	m	struct:glsl_info_s
ft_apply	libft/ft_apply.c	/^void	ft_apply(void *data, size_t len, size_t size, void (*f)(void *))$/;"	f
ft_atoi	libft/ft_atoi.c	/^int		ft_atoi(const char *str)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f
ft_count_w	libft/ft_strsplit.c	/^static size_t	ft_count_w(char const *s, char c)$/;"	f	file:
ft_del	libft/ft_lstmap.c	/^static void	ft_del(void *data, size_t size)$/;"	f	file:
ft_digit	libft/ft_itoa.c	/^static int	ft_digit(int n)$/;"	f	file:
ft_foreach	libft/ft_foreach.c	/^void	ft_foreach(int *tab, int length, void (*f)(int))$/;"	f
ft_isalnum	libft/ft_isalnum.c	/^int		ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int		ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int		ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int		ft_isdigit(int c)$/;"	f
ft_islower	libft/ft_islower.c	/^int		ft_islower(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int		ft_isprint(int c)$/;"	f
ft_isspace	libft/ft_isspace.c	/^int		ft_isspace(int c)$/;"	f
ft_isupper	libft/ft_isupper.c	/^int		ft_isupper(int c)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char		*ft_itoa(int n)$/;"	f
ft_len	libft/ft_strsplit.c	/^static	size_t	ft_len(char const *s, char c)$/;"	f	file:
ft_lstadd	libft/ft_lstadd.c	/^void	ft_lstadd(t_list **alst, t_list *new)$/;"	f
ft_lstdel	libft/ft_lstdel.c	/^void	ft_lstdel(t_list **alst, void (*del)(void*, size_t))$/;"	f
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list **alst, void (*del)(void*, size_t))$/;"	f
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(t_list *elem))$/;"	f
ft_lstmap	libft/ft_lstmap.c	/^t_list		*ft_lstmap(t_list *lst, t_list *(*f)(t_list *elem))$/;"	f
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void const *content, size_t content_size)$/;"	f
ft_malloc	libft/ft_malloc.c	/^void	*ft_malloc(size_t size)$/;"	f
ft_map	libft/ft_map.c	/^void	*ft_map(const void *data, size_t len, size_t size,$/;"	f
ft_memalloc	libft/ft_memalloc.c	/^void	*ft_memalloc(size_t size)$/;"	f
ft_memccpy	libft/ft_memccpy.c	/^void	*ft_memccpy(void *dst, const void *src, int c, size_t n)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int		ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memdel	libft/ft_memdel.c	/^void	*ft_memdel(void **ap)$/;"	f
ft_memdup	libft/ft_memdup.c	/^void	*ft_memdup(const void *s, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_memswap	libft/ft_memswap.c	/^void	ft_memswap(void *s1, void *s2, size_t size)$/;"	f
ft_putchar	libft/ft_putchar.c	/^void	ft_putchar(char c)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl	libft/ft_putendl.c	/^void	ft_putendl(char const *s)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char const *s, int fd)$/;"	f
ft_putnbr	libft/ft_putnbr.c	/^void	ft_putnbr(int nb)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr	libft/ft_putstr.c	/^void	ft_putstr(char *s)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_qsort	libft/ft_qsort.c	/^void				ft_qsort(void *data, size_t len, size_t size,$/;"	f
ft_realloc	libft/ft_realloc.c	/^void	*ft_realloc(void *ptr, size_t new, size_t old)$/;"	f
ft_skip	libft/ft_strsplit.c	/^static	size_t	ft_skip(char const *s, char c)$/;"	f	file:
ft_strcat	libft/ft_strcat.c	/^char	*ft_strcat(char *s1, const char *s2)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strclr	libft/ft_strclr.c	/^void	ft_strclr(char *s)$/;"	f
ft_strcmp	libft/ft_strcmp.c	/^int		ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strcpy	libft/ft_strcpy.c	/^char	*ft_strcpy(char *dst, const char *src)$/;"	f
ft_strdel	libft/ft_strdel.c	/^void	ft_strdel(char **as)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strelems	libft/ft_strelems.c	/^size_t	ft_strelems(const char *s, int delim)$/;"	f
ft_strequ	libft/ft_strequ.c	/^int		ft_strequ(char const *s1, char const *s2)$/;"	f
ft_striter	libft/ft_striter.c	/^void	ft_striter(char *s, void (*f)(char*))$/;"	f
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f
ft_strjmp	libft/ft_strjmp.c	/^char	*ft_strjmp(char **s, int delim)$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t		ft_strlen(const char *s)$/;"	f
ft_strmap	libft/ft_strmap.c	/^char	*ft_strmap(char const *s, char (*f)(char))$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncat	libft/ft_strncat.c	/^char	*ft_strncat(char *s1, const char *s2, size_t n)$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int		ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strncpy	libft/ft_strncpy.c	/^char	*ft_strncpy(char *dst, const char *src, size_t len)$/;"	f
ft_strnequ	libft/ft_strnequ.c	/^int		ft_strnequ(char const *s1, char const *s2, size_t n)$/;"	f
ft_strnew	libft/ft_strnew.c	/^char	*ft_strnew(size_t size)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strsplit	libft/ft_strsplit.c	/^char			**ft_strsplit(char const *s, char c)$/;"	f
ft_strspn	libft/ft_strspn.c	/^size_t	ft_strspn(const char *s, const char *accept)$/;"	f
ft_strstr	libft/ft_strstr.c	/^char	*ft_strstr(const char *haystack, const char *needle)$/;"	f
ft_strsub	libft/ft_strsub.c	/^char	*ft_strsub(char const *s, unsigned int start, size_t len)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int		ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int		ft_toupper(int c)$/;"	f
ft_umax	libft/ft_umax.c	/^uintmax_t	ft_umax(uintmax_t a, uintmax_t b)$/;"	f
ft_umin	libft/ft_umin.c	/^uintmax_t	ft_umin(uintmax_t a, uintmax_t b)$/;"	f
func_t	minilibx_macos/mlx_int.h	/^typedef int (*func_t)();$/;"	t
g_key	src/keyboard.c	/^static const t_shortcut	g_key[KEYBOARD_MAX] = {$/;"	v	file:
get_next_line	libft/get_next_line.c	/^int		get_next_line(const int fd, char **line)$/;"	f
get_opacity	src/color.c	/^int			get_opacity(int color, double opacity)$/;"	f
get_point	src/draw_map.c	/^static t_point	get_point(int x, int y, t_map *map)$/;"	f	file:
glsl_info_s	minilibx_macos/mlx_int.h	/^typedef struct	glsl_info_s$/;"	s
glsl_info_t	minilibx_macos/mlx_int.h	/^} glsl_info_t;$/;"	t	typeref:struct:glsl_info_s
go_read_smth	libft/get_next_line.c	/^int		go_read_smth(char **tail, int fd)$/;"	f
height	include/fdf.h	/^	ssize_t			height;$/;"	m	struct:__anon4
height	minilibx_macos/font.c	/^  unsigned int 	 height;$/;"	m	struct:__anon8	file:
height	minilibx_macos/mlx_int.h	/^  int			height;$/;"	m	struct:mlx_img_list_s
hold	include/fdf.h	/^	bool			hold;$/;"	m	struct:__anon1
image	include/fdf.h	/^	void			*image;$/;"	m	struct:__anon6
image_fshader	minilibx_macos/mlx_int.h	/^  GLuint	image_fshader;$/;"	m	struct:glsl_info_s
image_program	minilibx_macos/mlx_int.h	/^  GLuint	image_program;$/;"	m	struct:glsl_info_s
image_vshader	minilibx_macos/mlx_int.h	/^  GLuint	image_vshader;$/;"	m	struct:glsl_info_s
img	minilibx_macos/mlx_int.h	/^  mlx_img_list_t	*img;$/;"	m	struct:mlx_img_ctx_s
img_list	minilibx_macos/mlx_int.h	/^  mlx_img_ctx_t		*img_list;$/;"	m	struct:mlx_win_list_s
img_list	minilibx_macos/mlx_int.h	/^  mlx_img_list_t	*img_list;$/;"	m	struct:mlx_ptr_s
img_ptr	include/fdf.h	/^	int				*img_ptr;$/;"	m	struct:__anon6
iso	src/projection.c	/^static void	iso(t_point *p)$/;"	f	file:
item_size	libft/vec.h	/^	size_t	item_size;$/;"	m	struct:__anon7
key_hook	src/keyboard.c	/^int		key_hook(int keycode, t_fdf *fdf)$/;"	f
line_size	include/fdf.h	/^	int				line_size;$/;"	m	struct:__anon6
loc_font_atlassize	minilibx_macos/mlx_int.h	/^  GLint		loc_font_atlassize;$/;"	m	struct:glsl_info_s
loc_font_color	minilibx_macos/mlx_int.h	/^  GLint		loc_font_color;$/;"	m	struct:glsl_info_s
loc_font_posinatlas	minilibx_macos/mlx_int.h	/^  GLint		loc_font_posinatlas;$/;"	m	struct:glsl_info_s
loc_font_posinwin	minilibx_macos/mlx_int.h	/^  GLint		loc_font_posinwin;$/;"	m	struct:glsl_info_s
loc_font_position	minilibx_macos/mlx_int.h	/^  GLint		loc_font_position;$/;"	m	struct:glsl_info_s
loc_font_texture	minilibx_macos/mlx_int.h	/^  GLint		loc_font_texture;$/;"	m	struct:glsl_info_s
loc_font_winhalfsize	minilibx_macos/mlx_int.h	/^  GLint		loc_font_winhalfsize;$/;"	m	struct:glsl_info_s
loc_image_pos	minilibx_macos/mlx_int.h	/^  GLint		loc_image_pos;$/;"	m	struct:glsl_info_s
loc_image_position	minilibx_macos/mlx_int.h	/^  GLint		loc_image_position;$/;"	m	struct:glsl_info_s
loc_image_size	minilibx_macos/mlx_int.h	/^  GLint		loc_image_size;$/;"	m	struct:glsl_info_s
loc_image_texture	minilibx_macos/mlx_int.h	/^  GLint		loc_image_texture;$/;"	m	struct:glsl_info_s
loc_image_winhalfsize	minilibx_macos/mlx_int.h	/^  GLint		loc_image_winhalfsize;$/;"	m	struct:glsl_info_s
loc_pixel_position	minilibx_macos/mlx_int.h	/^  GLint		loc_pixel_position;$/;"	m	struct:glsl_info_s
loc_pixel_texture	minilibx_macos/mlx_int.h	/^  GLint		loc_pixel_texture;$/;"	m	struct:glsl_info_s
loc_pixel_winhalfsize	minilibx_macos/mlx_int.h	/^  GLint		loc_pixel_winhalfsize;$/;"	m	struct:glsl_info_s
lomuto	libft/ft_qsort.c	/^static inline void	*lomuto(void *left, void *right, size_t size,$/;"	f	file:
loop_hook	minilibx_macos/mlx_int.h	/^  void			(*loop_hook)(void *);$/;"	m	struct:mlx_ptr_s
loop_hook_data	minilibx_macos/mlx_int.h	/^  void			*loop_hook_data;$/;"	m	struct:mlx_ptr_s
loop_timer	minilibx_macos/mlx_int.h	/^  void			*loop_timer;$/;"	m	struct:mlx_ptr_s
main	src/main.c	/^int			main(int argc, char **argv)$/;"	f
main_loop_active	minilibx_macos/mlx_int.h	/^  int			main_loop_active;$/;"	m	struct:mlx_ptr_s
map	include/fdf.h	/^	t_map			*map;$/;"	m	struct:__anon6
max_size	libft/vec.h	/^	ssize_t	max_size;$/;"	m	struct:__anon7
max_z	include/fdf.h	/^	int				max_z;$/;"	m	struct:__anon4
min_max	src/read_map.c	/^static void		min_max(t_map *map)$/;"	f	file:
min_z	include/fdf.h	/^	int				min_z;$/;"	m	struct:__anon4
mlx	include/fdf.h	/^	void			*mlx;$/;"	m	struct:__anon6
mlx_col_name	minilibx_macos/mlx_rgb.c	/^struct s_col_name mlx_col_name[] =$/;"	v	typeref:struct:s_col_name
mlx_img_ctx_s	minilibx_macos/mlx_int.h	/^typedef struct	mlx_img_ctx_s$/;"	s
mlx_img_ctx_t	minilibx_macos/mlx_int.h	/^} mlx_img_ctx_t;$/;"	t	typeref:struct:mlx_img_ctx_s
mlx_img_list_s	minilibx_macos/mlx_int.h	/^typedef struct	mlx_img_list_s$/;"	s
mlx_img_list_t	minilibx_macos/mlx_int.h	/^} mlx_img_list_t;$/;"	t	typeref:struct:mlx_img_list_s
mlx_int_file_get_rid_comment	minilibx_macos/mlx_xpm.c	/^void	mlx_int_file_get_rid_comment(char *ptr, int size)$/;"	f
mlx_int_get_col_name	minilibx_macos/mlx_xpm.c	/^int	mlx_int_get_col_name(char *str,int size)$/;"	f
mlx_int_get_line	minilibx_macos/mlx_xpm.c	/^char	*mlx_int_get_line(char *ptr,int *pos,int size)$/;"	f
mlx_int_get_text_rgb	minilibx_macos/mlx_xpm.c	/^int	mlx_int_get_text_rgb(char *name, char *end)$/;"	f
mlx_int_parse_xpm	minilibx_macos/mlx_xpm.c	/^void	*mlx_int_parse_xpm(mlx_ptr_t *xvar,void *info,int info_size,char *(*f)())$/;"	f
mlx_int_static_line	minilibx_macos/mlx_xpm.c	/^char	*mlx_int_static_line(char **xpm_data,int *pos,int size)$/;"	f
mlx_int_str_str	minilibx_macos/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str(char *str,char *find,int len)$/;"	f
mlx_int_str_str_cote	minilibx_macos/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str_cote(char *str,char *find,int len)$/;"	f
mlx_int_str_to_wordtab	minilibx_macos/mlx_int_str_to_wordtab.c	/^char	**mlx_int_str_to_wordtab(char *str)$/;"	f
mlx_int_xpm_set_pixel	minilibx_macos/mlx_xpm.c	/^void	mlx_int_xpm_set_pixel(mlx_img_list_t *img, char *data, int opp, int col, int x)$/;"	f
mlx_ptr_s	minilibx_macos/mlx_int.h	/^typedef struct		mlx_ptr_s$/;"	s
mlx_ptr_t	minilibx_macos/mlx_int.h	/^} mlx_ptr_t;$/;"	t	typeref:struct:mlx_ptr_s
mlx_shaders	minilibx_macos/mlx_shaders.c	/^int mlx_shaders(glsl_info_t *glsl)$/;"	f
mlx_shaders_font	minilibx_macos/mlx_shaders.c	/^int mlx_shaders_font(glsl_info_t *glsl)$/;"	f
mlx_shaders_image	minilibx_macos/mlx_shaders.c	/^int mlx_shaders_image(glsl_info_t *glsl)$/;"	f
mlx_shaders_pixel	minilibx_macos/mlx_shaders.c	/^int mlx_shaders_pixel(glsl_info_t *glsl)$/;"	f
mlx_win_list_s	minilibx_macos/mlx_int.h	/^typedef struct	mlx_win_list_s$/;"	s
mlx_win_list_t	minilibx_macos/mlx_int.h	/^} mlx_win_list_t;$/;"	t	typeref:struct:mlx_win_list_s
mlx_xpm_file_to_image	minilibx_macos/mlx_xpm.c	/^void	*mlx_xpm_file_to_image(mlx_ptr_t *xvar,char *file,int *width,int *height)$/;"	f
mlx_xpm_to_image	minilibx_macos/mlx_xpm.c	/^void	*mlx_xpm_to_image(mlx_ptr_t *xvar,char **xpm_data,int *width,int *height)$/;"	f
mouse	include/fdf.h	/^	t_mouse			*mouse;$/;"	m	struct:__anon6
mouse_move	src/mouse.c	/^int		mouse_move(int x, int y, t_fdf *fdf)$/;"	f
mouse_pressed	src/mouse.c	/^int		mouse_pressed(int button, int x, int y, t_fdf *fdf)$/;"	f
mouse_released	src/mouse.c	/^int		mouse_released(int button, int x, int y, t_fdf *fdf)$/;"	f
move_side	src/keyboard.c	/^void	move_side(t_fdf *fdf, int keycode)$/;"	f
move_up	src/keyboard.c	/^void	move_up(t_fdf *fdf, int keycode)$/;"	f
myatoi	src/read_map.c	/^static void		myatoi(void *elem, const char *begin, const char *end)$/;"	f	file:
name	minilibx_macos/mlx_xpm.c	/^  char  *name;$/;"	m	struct:s_col_name	file:
name	minilibx_macos/mlx_xpm.c	/^  int           name;$/;"	m	struct:s_xpm_col	file:
nb_flush	minilibx_macos/mlx_int.h	/^  int			nb_flush;$/;"	m	struct:mlx_win_list_s
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	minilibx_macos/mlx_int.h	/^  struct mlx_img_ctx_s	*next;$/;"	m	struct:mlx_img_ctx_s	typeref:struct:mlx_img_ctx_s::mlx_img_ctx_s
next	minilibx_macos/mlx_int.h	/^  struct mlx_img_list_s	*next;$/;"	m	struct:mlx_img_list_s	typeref:struct:mlx_img_list_s::mlx_img_list_s
next	minilibx_macos/mlx_int.h	/^  struct mlx_win_list_s	*next;$/;"	m	struct:mlx_win_list_s	typeref:struct:mlx_win_list_s::mlx_win_list_s
none	libft/vec.h	/^	t_obj	none;$/;"	m	struct:__anon7
offset_x	include/fdf.h	/^	int				offset_x;$/;"	m	struct:__anon5
offset_y	include/fdf.h	/^	int				offset_y;$/;"	m	struct:__anon5
pixel_data	minilibx_macos/font.c	/^  unsigned char	 pixel_data[1140 * 20 * 4 + 1];$/;"	m	struct:__anon8	file:
pixel_fshader	minilibx_macos/mlx_int.h	/^  GLuint	pixel_fshader;$/;"	m	struct:glsl_info_s
pixel_program	minilibx_macos/mlx_int.h	/^  GLuint	pixel_program;$/;"	m	struct:glsl_info_s
pixel_vshader	minilibx_macos/mlx_int.h	/^  GLuint	pixel_vshader;$/;"	m	struct:glsl_info_s
pixmgt	minilibx_macos/mlx_int.h	/^  int			pixmgt;$/;"	m	struct:mlx_win_list_s
prev_x	include/fdf.h	/^	int				prev_x;$/;"	m	struct:__anon1
prev_y	include/fdf.h	/^	int				prev_y;$/;"	m	struct:__anon1
projection	include/fdf.h	/^	t_projection	projection;$/;"	m	struct:__anon5
projection	src/projection.c	/^t_point		projection(t_point p, t_fdf *fdf)$/;"	f
put_pixel	src/draw.c	/^static void		put_pixel(t_fdf *fdf, int x, int y, int color)$/;"	f	file:
quick_sort	libft/ft_qsort.c	/^static inline void	quick_sort(void *left, void *right, size_t size,$/;"	f	file:
ratio_z	include/fdf.h	/^	int				ratio_z;$/;"	m	struct:__anon5
read_map	src/read_map.c	/^void			read_map(int fd, t_map *map)$/;"	f
rotate_x	src/projection.c	/^static void	rotate_x(t_point *p, double alpha)$/;"	f	file:
rotate_y	src/projection.c	/^static void	rotate_y(t_point *p, double alpha)$/;"	f	file:
rotate_z	src/projection.c	/^static void	rotate_z(t_point *p, double alpha)$/;"	f	file:
s_col_name	minilibx_macos/mlx_xpm.c	/^struct  s_col_name$/;"	s	file:
s_list	libft/libft.h	/^typedef struct		s_list$/;"	s
s_xpm_col	minilibx_macos/mlx_xpm.c	/^typedef struct  s_xpm_col$/;"	s	file:
set_background	src/draw_map.c	/^void			set_background(t_fdf *fdf)$/;"	f
size	libft/vec.h	/^	ssize_t	size;$/;"	m	struct:__anon7
straight_line	src/draw.c	/^static void		straight_line(t_point start, t_point end, t_fdf *fdf)$/;"	f	file:
t_camera	include/fdf.h	/^}					t_camera;$/;"	t	typeref:struct:__anon5
t_fdf	include/fdf.h	/^}					t_fdf;$/;"	t	typeref:struct:__anon6
t_list	libft/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_map	include/fdf.h	/^}					t_map;$/;"	t	typeref:struct:__anon4
t_mouse	include/fdf.h	/^}					t_mouse;$/;"	t	typeref:struct:__anon1
t_obj	libft/vec.h	/^typedef void *	t_obj;$/;"	t
t_point	include/fdf.h	/^}					t_point;$/;"	t	typeref:struct:__anon3
t_projection	include/fdf.h	/^}					t_projection;$/;"	t	typeref:enum:__anon2
t_shortcut	include/key.h	/^typedef void (*t_shortcut)(t_fdf *, int);$/;"	t
t_vec	libft/vec.h	/^} t_vec;$/;"	t	typeref:struct:__anon7
t_xpm_col	minilibx_macos/mlx_xpm.c	/^} t_xpm_col;$/;"	t	typeref:struct:s_xpm_col	file:
tail_to_line	libft/get_next_line.c	/^int		tail_to_line(char **tail, char **line)$/;"	f
texture	minilibx_macos/mlx_int.h	/^  GLuint		texture;$/;"	m	struct:mlx_img_ctx_s
vbuffer	minilibx_macos/mlx_int.h	/^  GLuint		vbuffer;$/;"	m	struct:mlx_img_ctx_s
vec_append	libft/vec_append.c	/^void	*vec_append(t_vec *v, const void *object)$/;"	f
vec_apply	libft/vec_apply.c	/^void	vec_apply(t_vec *v, void (*f)(void *))$/;"	f
vec_bsearch	libft/vec_bsearch.c	/^void	*vec_bsearch(const t_vec *v, const void *object,$/;"	f
vec_clear	libft/vec_clear.c	/^void	vec_clear(t_vec *v)$/;"	f
vec_clone	libft/vec_clone.c	/^t_vec	*vec_clone(const t_vec *v)$/;"	f
vec_copy	libft/vec_copy.c	/^void	vec_copy(t_vec *v, const t_vec *u)$/;"	f
vec_count	libft/vec_count.c	/^size_t	vec_count(const t_vec *v, const void *object)$/;"	f
vec_create	libft/vec_create.c	/^t_vec	*vec_create(size_t size, size_t item_size)$/;"	f
vec_extend	libft/vec_extend.c	/^t_vec	*vec_extend(t_vec *v, const t_vec *u)$/;"	f
vec_extract	libft/vec_extract.c	/^t_vec	*vec_extract(const t_vec *v, ssize_t index, size_t size)$/;"	f
vec_filter	libft/vec_filter.c	/^t_vec	*vec_filter(const t_vec *v, bool (*f)(const void *))$/;"	f
vec_free	libft/vec_free.c	/^void	vec_free(t_vec *v)$/;"	f
vec_get	libft/vec_get.c	/^void	*vec_get(const t_vec *v, ssize_t index)$/;"	f
vec_import	libft/vec_import.c	/^t_vec	*vec_import(const char *s, int delim, size_t item_size,$/;"	f
vec_index	libft/vec_index.c	/^ssize_t	vec_index(const t_vec *v, const void *object)$/;"	f
vec_insert	libft/vec_insert.c	/^void	*vec_insert(t_vec *v, ssize_t index, const void *object)$/;"	f
vec_map	libft/vec_map.c	/^t_vec	*vec_map(const t_vec *v, void (*f)(void *))$/;"	f
vec_pop	libft/vec_pop.c	/^void	*vec_pop(t_vec *v, ssize_t index)$/;"	f
vec_prepend	libft/vec_prepend.c	/^void	*vec_prepend(t_vec *v, const void *object)$/;"	f
vec_remove	libft/vec_remove.c	/^void	*vec_remove(t_vec *v, ssize_t index)$/;"	f
vec_resize	libft/vec_resize.c	/^void	*vec_resize(t_vec *v, ssize_t size)$/;"	f
vec_reverse	libft/vec_reverse.c	/^void	vec_reverse(t_vec *v)$/;"	f
vec_search	libft/vec_search.c	/^void	*vec_search(const t_vec *v, const void *object)$/;"	f
vec_set	libft/vec_set.c	/^void	*vec_set(t_vec *v, ssize_t index, const void *object)$/;"	f
vec_sort	libft/vec_sort.c	/^void	vec_sort(t_vec *v, int (*cmp)(const void *, const void *))$/;"	f
vectorize	libft/vectorize.c	/^t_vec	vectorize(void *data, size_t size, size_t item_size)$/;"	f
vertex	include/fdf.h	/^	t_vec			*vertex;$/;"	m	struct:__anon4
vertexes	minilibx_macos/mlx_int.h	/^  GLfloat		vertexes[8];$/;"	m	struct:mlx_img_list_s
width	include/fdf.h	/^	ssize_t			width;$/;"	m	struct:__anon4
width	minilibx_macos/font.c	/^  unsigned int 	 width;$/;"	m	struct:__anon8	file:
width	minilibx_macos/mlx_int.h	/^  int			width;$/;"	m	struct:mlx_img_list_s
win_list	minilibx_macos/mlx_int.h	/^  mlx_win_list_t	*win_list;$/;"	m	struct:mlx_ptr_s
window	include/fdf.h	/^	void			*window;$/;"	m	struct:__anon6
winid	minilibx_macos/mlx_int.h	/^  void			*winid;$/;"	m	struct:mlx_win_list_s
x	include/fdf.h	/^	int				x;$/;"	m	struct:__anon1
x	include/fdf.h	/^	int				x;$/;"	m	struct:__anon3
y	include/fdf.h	/^	int				y;$/;"	m	struct:__anon1
y	include/fdf.h	/^	int				y;$/;"	m	struct:__anon3
z	include/fdf.h	/^	int				z;$/;"	m	struct:__anon3
zoom	include/fdf.h	/^	int				zoom;$/;"	m	struct:__anon5
